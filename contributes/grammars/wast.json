{
  "name": "WebAssembly Script",
  "scopeName": "source.wasm.wast",
  "fileTypes": [
    ".wast"
  ],
  "patterns": [
    {
      "include": "#PARSE"
    }
  ],
  "repository": {
    "PARSE": {
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "include": "#command"
            },
            {
              "include": "#moduleField"
            }
          ]
        }
      ]
    },
    "annotation": {
      "name": "meta.annotation.wasm",
      "begin": "\\((?=@)",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.annotation.wasm punctuation.definition.tag"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.annotation.wasm punctuation.definition.tag"
        }
      },
      "patterns": [
        {
          "begin": "@",
          "beginCaptures": {
            "0": {
              "name": "meta.annotation.name.wasm punctuation.definition.tag"
            }
          },
          "end": "(?=\\))",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.annotation.wasm"
            }
          },
          "patterns": [
            {
              "begin": "[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+",
              "beginCaptures": {
                "0": {
                  "name": "meta.annotation.wasm constant.regexp"
                }
              },
              "end": "(?=\\))",
              "contentName": "comment.wasm",
              "patterns": [
                {
                  "include": "#annotationPart"
                }
              ]
            }
          ]
        }
      ]
    },
    "annotationParens": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#annotationPart"
        }
      ]
    },
    "annotationPart": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#annotationParens"
        },
        {
          "match": "[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "begin": "\"",
          "end": "(\")|((?:[^\\\\\\n])$)",
          "patterns": [
            {
              "name": "constant.character.escape.wasm"
            }
          ]
        }
      ]
    },
    "blockComment": {
      "name": "meta.comment.block.wasm comment.block.wasm",
      "begin": "(\\(;)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.wasm"
        }
      },
      "end": "(;\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.comment.wasm"
        }
      }
    },
    "comment": {
      "patterns": [
        {
          "include": "#lineComment"
        },
        {
          "include": "#blockComment"
        }
      ]
    },
    "elemType": {
      "name": "storage.type.wasm",
      "match": "\\bfuncref\\b"
    },
    "exportDesc": {
      "patterns": [
        {
          "include": "#exportDescFunc"
        },
        {
          "include": "#exportDescTable"
        },
        {
          "include": "#exportDescMemory"
        },
        {
          "include": "#exportDescGlobal"
        }
      ]
    },
    "exportDescFunc": {
      "begin": "\\bfunc\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.func.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        }
      ]
    },
    "exportDescGlobal": {
      "begin": "\\bglobal\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.global.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        }
      ]
    },
    "exportDescMemory": {
      "begin": "\\bmemory\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.memory.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        }
      ]
    },
    "exportDescTable": {
      "begin": "\\btable\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.table.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        }
      ]
    },
    "expr": {
      "patterns": [
        {
          "include": "#exprPlain"
        },
        {
          "include": "#exprCall"
        },
        {
          "include": "#exprBlock"
        },
        {
          "include": "#exprLoop"
        },
        {
          "include": "#exprIf"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#expr"
            }
          ]
        }
      ]
    },
    "exprBlock": {
      "patterns": [
        {
          "name": "keyword.control.wasm",
          "match": "\\bblock\\b"
        }
      ]
    },
    "exprCall": {
      "patterns": [
        {
          "name": "keyword.control.wasm",
          "match": "\\bcall_indirect\\b"
        }
      ]
    },
    "exprIf": {
      "patterns": [
        {
          "name": "keyword.control.wasm",
          "match": "\\bif\\b"
        }
      ]
    },
    "exprLoop": {
      "patterns": [
        {
          "name": "keyword.control.wasm",
          "match": "\\bloop\\b"
        }
      ]
    },
    "exprPlain": {
      "patterns": [
        {
          "include": "#instrPlain"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#expr"
            }
          ]
        }
      ]
    },
    "extra": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#annotation"
        }
      ]
    },
    "funcLocals": {
      "begin": "\\blocal\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.local.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.parameter.local.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#valueType"
        }
      ]
    },
    "funcType": {
      "patterns": [
        {
          "include": "#funcTypeParams"
        },
        {
          "include": "#funcTypeResults"
        }
      ]
    },
    "funcTypeParams": {
      "name": "meta.func-type.params.wasm",
      "begin": "\\bparam\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.param.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "include": "#valueType"
        },
        {
          "name": "entity.name.type.alias.wasm",
          "match": "[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        }
      ]
    },
    "funcTypeResults": {
      "name": "meta.func-type.results.wasm",
      "begin": "\\bresult\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.param.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "include": "#valueType"
        }
      ]
    },
    "globalType": {
      "patterns": [
        {
          "include": "#globalTypeImm"
        },
        {
          "include": "#globalTypeMut"
        }
      ]
    },
    "globalTypeImm": {
      "patterns": [
        {
          "include": "#valueType"
        }
      ]
    },
    "globalTypeMut": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "begin": "(?<=\\()",
              "end": "\\bmut\\b",
              "endCaptures": {
                "0": {
                  "name": "storage.modifier.wasm"
                }
              },
              "patterns": [
                {
                  "include": "#extra"
                },
                {
                  "include": "#valueType"
                }
              ]
            }
          ]
        }
      ]
    },
    "importDesc": {
      "name": "meta.import-desc.wasm",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.wasm"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.wasm"
        }
      },
      "patterns": [
        {
          "include": "#importDescFuncType"
        },
        {
          "include": "#importDescGlobalType"
        },
        {
          "include": "#importDescMemoryType"
        },
        {
          "include": "#importDescTableType"
        }
      ]
    },
    "importDescFuncType": {
      "name": "meta.import-desc.func-type.wasm",
      "begin": "\\bfunc\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.func.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "entity.name.function.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#funcType"
        },
        {
          "include": "#typeUse"
        }
      ]
    },
    "importDescGlobalType": {
      "name": "meta.import-desc.global-type.wasm",
      "begin": "\\bglobal\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.global.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.global.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#globalType"
        }
      ]
    },
    "importDescMemoryType": {
      "name": "meta.import-desc.memory-type.wasm",
      "begin": "\\bmemory\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.memory.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.memory.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#memoryType"
        }
      ]
    },
    "importDescTableType": {
      "name": "meta.import-desc.table-type.wasm",
      "begin": "\\btable\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.table.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.table.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#tableType"
        }
      ]
    },
    "inlineExport": {
      "name": "meta.export.wasm",
      "begin": "\\bexport\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.export.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "variable.other.readwrite.alias.wasm",
          "begin": "\"",
          "end": "(\")|((?:[^\\\\\\n])$)",
          "patterns": [
            {
              "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
            }
          ]
        }
      ]
    },
    "inlineImport": {
      "begin": "\\bimport\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.import.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "include": "#inlineImportNames"
        }
      ]
    },
    "inlineImportNames": {
      "patterns": [
        {
          "begin": "(?:(?<=(?:[^[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+]import|^import))(?![0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+))",
          "end": "(?<=\")",
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "name": "entity.name.type.module.wasm",
              "begin": "\"",
              "end": "(\")|((?:[^\\\\\\n])$)",
              "patterns": [
                {
                  "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
                }
              ]
            }
          ]
        },
        {
          "name": "variable.other.readwrite.alias.wasm",
          "begin": "\"",
          "end": "(\")|((?:[^\\\\\\n])$)",
          "patterns": [
            {
              "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
            }
          ]
        }
      ]
    },
    "instrBlock": {
      "patterns": []
    },
    "instrCall": {
      "patterns": []
    },
    "instrList": {
      "patterns": [
        {
          "include": "#instrListCall"
        },
        {
          "include": "#instr"
        }
      ]
    },
    "instrPlain": {
      "patterns": [
        {
          "include": "#instrPlainNop"
        },
        {
          "include": "#instrPlainBr"
        },
        {
          "include": "#instrPlainBrIf"
        },
        {
          "include": "#instrPlainBrTable"
        },
        {
          "include": "#instrPlainReturn"
        },
        {
          "include": "#instrPlainLocalGet"
        },
        {
          "include": "#instrPlainLocalSet"
        },
        {
          "include": "#instrPlainLocalTee"
        },
        {
          "include": "#instrPlainGlobalGet"
        },
        {
          "include": "#instrPlainGlobalSet"
        },
        {
          "include": "#instrPlainMemorySize"
        },
        {
          "include": "#instrPlainMemoryGrow"
        },
        {
          "include": "#instrPlainConst"
        },
        {
          "include": "#instrPlainTest"
        },
        {
          "include": "#instrPlainCompare"
        },
        {
          "include": "#instrPlainUnary"
        },
        {
          "include": "#instrPlainBinary"
        },
        {
          "include": "#instrPlainConvert"
        },
        {
          "include": "#instrPlainLoad"
        },
        {
          "include": "#instrPlainStore"
        },
        {
          "include": "#instrPlainCall"
        }
      ]
    },
    "instrPlainBinary": {
      "patterns": []
    },
    "instrPlainBr": {
      "name": "keyword.control.wasm",
      "match": "\\bbr\\b"
    },
    "instrPlainBrIf": {
      "name": "keyword.control.wasm",
      "match": "\\bbr_if\\b"
    },
    "instrPlainBrTable": {
      "patterns": []
    },
    "instrPlainCall": {
      "patterns": []
    },
    "instrPlainCompare": {
      "patterns": []
    },
    "instrPlainConvert": {
      "patterns": []
    },
    "instrPlainConst": {
      "patterns": [
        {
          "include": "#instrType"
        },
        {
          "name": "punctuation.accessor.wasm",
          "match": "\\."
        },
        {
          "name": "keyword.control.const.wasm",
          "match": "\\bconst\\b"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "instrPlainGlobalGet": {
      "patterns": []
    },
    "instrPlainGlobalSet": {
      "patterns": []
    },
    "instrPlainLoad": {
      "patterns": []
    },
    "instrPlainLocalGet": {
      "patterns": []
    },
    "instrPlainLocalSet": {
      "patterns": []
    },
    "instrPlainLocalTee": {
      "patterns": []
    },
    "instrPlainMemorySize": {
      "patterns": []
    },
    "instrPlainMemoryGrow": {
      "patterns": []
    },
    "instrPlainNop": {
      "name": "keyword.control.wasm",
      "match": "\\bnop\\b"
    },
    "instrPlainReturn": {
      "patterns": []
    },
    "instrPlainStore": {
      "patterns": []
    },
    "instrPlainTest": {
      "patterns": []
    },
    "instrPlainUnary": {
      "patterns": []
    },
    "instrType": {
      "patterns": [
        {
          "include": "#instrTypeInt"
        },
        {
          "include": "#instrTypeFloat"
        }
      ]
    },
    "instrTypeInt": {
      "name": "storage.type.int.wasm",
      "match": "i(?:32|64)"
    },
    "instrTypeFloat": {
      "name": "storage.type.float.wasm",
      "match": "f(?:32|64)"
    },
    "limits": {
      "patterns": [
        {
          "name": "constant.numeric.integer",
          "match": "[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*"
        }
      ]
    },
    "lineComment": {
      "name": "meta.comment.line.wasm",
      "begin": "(^[ \\t]+)?((;;))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.wasm"
        },
        "2": {
          "name": "comment.line.double-semicolon.wasm"
        },
        "3": {
          "name": "punctuation.definition.comment.wasm"
        }
      },
      "end": "(?=$)",
      "contentName": "comment.line.double-semicolon.wasm"
    },
    "literal": {
      "patterns": []
    },
    "literalNAN": {
      "patterns": []
    },
    "memoryFieldsData": {
      "begin": "\\bdata\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.memory.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#string"
        }
      ]
    },
    "memoryFieldsType": {
      "patterns": [
        {
          "include": "#inlineImport"
        },
        {
          "include": "#memoryType"
        }
      ]
    },
    "memoryType": {
      "patterns": [
        {
          "include": "#limits"
        }
      ]
    },
    "module": {
      "name": "meta.module.wasm",
      "patterns": [
        {
          "begin": "\\bmodule\\b",
          "beginCaptures": {
            "0": {
              "name": "storage.type.module.wasm"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "begin": "[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+",
              "beginCaptures": {
                "0": {
                  "name": "entity.name.type.module.wasm"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#extra"
                },
                {
                  "include": "#moduleField"
                }
              ]
            },
            {
              "include": "#moduleField"
            }
          ]
        }
      ]
    },
    "moduleField": {
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "include": "#moduleFieldData"
        },
        {
          "include": "#moduleFieldElem"
        },
        {
          "include": "#moduleFieldExport"
        },
        {
          "include": "#moduleFieldFunc"
        },
        {
          "include": "#moduleFieldGlobal"
        },
        {
          "include": "#moduleFieldImport"
        },
        {
          "include": "#moduleFieldMemory"
        },
        {
          "include": "#moduleFieldStart"
        },
        {
          "include": "#moduleFieldTable"
        },
        {
          "include": "#moduleFieldType"
        }
      ]
    },
    "moduleFieldData": {
      "name": "meta.data.wasm",
      "begin": "\\bdata\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.data.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "variable.other.constant entity.name.data.wasm",
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        },
        {
          "include": "#offset"
        },
        {
          "include": "#string"
        }
      ]
    },
    "moduleFieldElem": {
      "name": "meta.elem.wasm",
      "begin": "\\belem\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.elem.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "include": "#offset"
        },
        {
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        }
      ]
    },
    "moduleFieldExport": {
      "name": "meta.export.wasm",
      "begin": "\\bexport\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.export.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "variable.other.readwrite.alias.wasm",
          "begin": "\"",
          "end": "(\")|((?:[^\\\\\\n])$)",
          "patterns": [
            {
              "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#exportDesc"
            }
          ]
        }
      ]
    },
    "moduleFieldFunc": {
      "name": "meta.func.wasm",
      "begin": "\\bfunc\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.function.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "entity.name.function.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#inlineExport"
            },
            {
              "include": "#inlineImport"
            },
            {
              "include": "#typeUse"
            },
            {
              "include": "#funcTypeParams"
            },
            {
              "include": "#funcTypeResults"
            },
            {
              "include": "#funcLocals"
            },
            {
              "include": "#expr"
            }
          ]
        },
        {
          "include": "#instrList"
        }
      ]
    },
    "moduleFieldGlobal": {
      "name": "meta.global.wasm",
      "begin": "\\bglobal\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.global.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "variable.other.global.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "include": "#inlineExport"
            },
            {
              "include": "#inlineImport"
            }
          ]
        },
        {
          "include": "#globalType"
        },
        {
          "include": "#expr"
        }
      ]
    },
    "moduleFieldImport": {
      "name": "meta.import.wasm",
      "begin": "\\bimport\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.import.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "include": "#inlineImportNames"
        },
        {
          "include": "#importDesc"
        }
      ]
    },
    "moduleFieldMemory": {
      "name": "meta.memory.wasm",
      "begin": "\\bmemory\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.memory.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "variable.other.memory.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#inlineExport"
            },
            {
              "include": "#memoryFieldsData"
            },
            {
              "include": "#memoryFieldsType"
            }
          ]
        }
      ]
    },
    "moduleFieldStart": {
      "name": "meta.start.wasm",
      "begin": "\\bstart\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.start.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+",
          "beginCaptures": {
            "0": {
              "name": "entity.name.function.wasm"
            }
          },
          "end": "(?=\\))"
        }
      ]
    },
    "moduleFieldTable": {
      "name": "meta.table.wasm",
      "begin": "\\btable\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.table.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "variable.other.table.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#elemType"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "include": "#inlineExport"
            },
            {
              "include": "#tableFieldsElem"
            },
            {
              "include": "#tableFieldsType"
            }
          ]
        }
      ]
    },
    "moduleFieldType": {
      "name": "meta.type.wasm",
      "begin": "\\btype\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.type.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "name": "entity.name.type.alias.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#typeField"
        }
      ]
    },
    "name": {
      "name": "string.quoted.double.wasm",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.wasm"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.wasm"
        },
        "2": {
          "name": "invalid.illegal.newline.wasm"
        }
      },
      "patterns": [
        {
          "include": "#stringCharacterEscape"
        }
      ]
    },
    "offset": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.wasm"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.wasm"
        }
      },
      "patterns": []
    },
    "offsetExpr": {
      "patterns": [
        {
          "include": "#expr"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.wasm",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.wasm"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.wasm"
        },
        "2": {
          "name": "invalid.illegal.newline.wasm"
        }
      },
      "patterns": [
        {
          "include": "#stringCharacterEscape"
        }
      ]
    },
    "stringCharacterEscape": {
      "name": "constant.character.escape.wasm",
      "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
    },
    "tableFieldsElem": {
      "name": "meta.table-fields.elem.wasm",
      "begin": "\\belem\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.elem.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        }
      ]
    },
    "tableFieldsType": {
      "patterns": [
        {
          "include": "#inlineImport"
        },
        {
          "include": "#tableType"
        }
      ]
    },
    "tableType": {
      "patterns": [
        {
          "include": "#limits"
        },
        {
          "include": "#elemType"
        }
      ]
    },
    "typeField": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.wasm"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.wasm"
        }
      },
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "(?<=\\()",
          "end": "\\bfunc\\b",
          "endCaptures": {
            "0": {
              "name": "storage.type.function.wasm"
            }
          }
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "include": "#funcType"
            }
          ]
        }
      ]
    },
    "typeUse": {
      "name": "meta.type-use.wasm",
      "begin": "\\btype\\b",
      "beginCaptures": {
        "0": {
          "name": "storage.type.type.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "entity.name.type.alias.wasm",
          "match": "(?:[0-9][0-9_]*|0x[0-9A-Fa-f][0-9A-Fa-f_]*)|(?:\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+)"
        }
      ]
    },
    "valueType": {
      "name": "storage.type.value.wasm",
      "match": "[fi](?:32|64)"
    },
    "action": {
      "patterns": [
        {
          "include": "#actionInvoke"
        },
        {
          "include": "#actionGet"
        }
      ]
    },
    "actionGet": {
      "name": "meta.action.get.wasm",
      "begin": "\\bget\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.get.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "name": "variable.other.readwrite.alias.wasm",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
            }
          ]
        }
      ]
    },
    "actionInvoke": {
      "name": "meta.action.invoke.wasm",
      "begin": "\\binvoke\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.invoke.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "name": "variable.other.readwrite.alias.wasm",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\([0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|[\\\\'\\\\\"ntr]|$)"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#exprPlainConst"
            }
          ]
        }
      ]
    },
    "assertExhaustion": {
      "name": "meta.assert.exhaustion.wasm",
      "begin": "\\bassert_exhaustion\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.assert.exhaustion.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#action"
            }
          ]
        },
        {
          "include": "#string"
        }
      ]
    },
    "assertInvalid": {
      "name": "meta.assert.invalid.wasm",
      "begin": "\\bassert_invalid\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.assert.invalid.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#scriptModule"
            }
          ]
        },
        {
          "include": "#string"
        }
      ]
    },
    "assertion": {
      "patterns": [
        {
          "include": "#assertExhaustion"
        },
        {
          "include": "#assertInvalid"
        },
        {
          "include": "#assertMalformed"
        },
        {
          "include": "#assertReturn"
        },
        {
          "include": "#assertTrap"
        },
        {
          "include": "#assertUnlinkable"
        }
      ]
    },
    "assertMalformed": {
      "name": "meta.assert.malformed.wasm",
      "begin": "\\bassert_malformed\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.assert.malformed.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#scriptModule"
            }
          ]
        },
        {
          "include": "#string"
        }
      ]
    },
    "assertReturn": {
      "name": "meta.assert.return.wasm",
      "begin": "\\bassert_return\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.assert.return.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#action"
            },
            {
              "include": "#result"
            }
          ]
        }
      ]
    },
    "assertTrap": {
      "name": "meta.assert.trap.wasm",
      "begin": "\\bassert_trap\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.assert.trap.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#action"
            },
            {
              "include": "#scriptModule"
            }
          ]
        },
        {
          "include": "#string"
        }
      ]
    },
    "assertUnlinkable": {
      "name": "meta.assert.unlinkable.wasm",
      "begin": "\\bassert_unlinkable\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.assert.unlinkable.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#extra"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.wasm"
            }
          },
          "patterns": [
            {
              "include": "#scriptModule"
            }
          ]
        },
        {
          "include": "#string"
        }
      ]
    },
    "command": {
      "patterns": [
        {
          "include": "#action"
        },
        {
          "include": "#assertion"
        },
        {
          "include": "#meta"
        },
        {
          "include": "#register"
        },
        {
          "include": "#scriptModule"
        }
      ]
    },
    "exprPlainConst": {
      "patterns": [
        {
          "include": "#instrPlainConst"
        }
      ]
    },
    "meta": {
      "patterns": [
        {
          "include": "#metaScript"
        },
        {
          "include": "#metaInput"
        },
        {
          "include": "#metaOutput"
        }
      ]
    },
    "metaInput": {
      "name": "meta.meta.input.wasm",
      "begin": "\\binput\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.meta.input.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#string"
        }
      ]
    },
    "metaOutput": {
      "name": "meta.meta.output.wasm",
      "begin": "\\boutput\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.meta.output.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#string"
        }
      ]
    },
    "metaScript": {
      "name": "meta.meta.script.wasm",
      "begin": "\\bscript\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.meta.script.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "variable.other.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        },
        {
          "include": "#command"
        }
      ]
    },
    "register": {
      "name": "meta.register.wasm",
      "begin": "\\bregister\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.meta.output.wasm"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "include": "#name"
        },
        {
          "name": "variable.other.wasm",
          "match": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+"
        }
      ]
    },
    "result": {
      "patterns": [
        {
          "include": "#exprPlainConst"
        }
      ]
    },
    "scriptModule": {
      "patterns": [
        {
          "begin": "\\bmodule\\b",
          "beginCaptures": {
            "0": {
              "name": "storage.type.module.wasm"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#extra"
            },
            {
              "begin": "\\$[0-9A-Za-z!#$%&'*+-./:<=>?@\\^_'|~]+",
              "beginCaptures": {
                "0": {
                  "name": "entity.name.type.module.wasm"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#extra"
                },
                {
                  "begin": "\\(",
                  "beginCaptures": {
                    "0": {
                      "name": "meta.brace.round.wasm"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "meta.brace.round.wasm"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#moduleField"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "\\bbinary\\b",
              "beginCaptures": {
                "0": {
                  "name": "storage.modifier.module.binary.wasm"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#extra"
                },
                {
                  "include": "#string"
                }
              ]
            },
            {
              "begin": "\\bquote\\b",
              "beginCaptures": {
                "0": {
                  "name": "storage.modifier.module.quote.wasm"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#extra"
                },
                {
                  "include": "#string"
                }
              ]
            },
            {
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "meta.brace.round.wasm"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "meta.brace.round.wasm"
                }
              },
              "patterns": [
                {
                  "include": "#moduleField"
                }
              ]
            }
          ]
        }
      ]
    }
  }
}